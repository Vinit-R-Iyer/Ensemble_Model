-------------------
IMPORTING PACKAGES
-------------------
import pandas as pd
import numpy as np
import seaborn as sea
import matplotlib.pyplot as plt
import gc
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from sklearn.ensemble import RandomForestClassifier

----------------
IMPORTING DATA
----------------
data = pd.read_excel("default of credit card clients.xls", header = 1)
data.head()

----------------------
EXPLORING THE DATA
----------------------
data.info()
data.describe()
plt.figure(figsize = (14,6))
plt.title('Amount of credit limit - Density Plot')
sea.set_color_codes("pastel")
sea.distplot(data['LIMIT_BAL'],kde=True,bins=200, color="blue")
plt.show()
data['LIMIT_BAL'].value_counts().head(5)

class_0 = data.loc[data['default payment next month'] == 0]["LIMIT_BAL"]
class_1 = data.loc[data['default payment next month'] == 1]["LIMIT_BAL"]
plt.figure(figsize = (14,6))
plt.title('Default amount of credit limit - grouped by Payment Next Month
(Density Plot)')
sea.set_color_codes("pastel")
sea.distplot(class_1,kde=True,bins=200, color="red")
sea.distplot(class_0,kde=True,bins=200, color="green")
plt.show()

fig, (axmale, axfemale) = plt.subplots(ncols=2, figsize=(12,6))
s = sea.boxplot(ax = axmale, x="SEX", y="LIMIT_BAL",
hue="SEX",data=data, palette="PRGn",showfliers=True)
s = sea.boxplot(ax = axfemale, x="SEX", y="LIMIT_BAL",
hue="SEX",data=data, palette="PRGn",showfliers=False)
plt.show();

--------------------
PREPARING THE DATA
--------------------
total = data.isnull().sum().sort_values(ascending = False)
print(total)

temp = data["default payment next month"].value_counts(normalize=True)
df = pd.DataFrame({'default payment next month': temp.index,'values':
temp.values})
plt.figure(dpi = 140)
plt.title('Checking data imbalance, (Default = 0, Not Default = 1)')
plt.bar(df['default payment next month'], df['values'])
plt.show()

-----------------------------------------
CREATING THE FEATURE CORRELATION MATRIX
-----------------------------------------
var =
['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5',
'BILL_AMT6']
plt.figure(figsize = (8,8))
plt.title('Amount of bill statement (Apr-Sept) \ncorrelation plot (Pearson)')
corr = data[var].corr()
sea.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidth
s=.1,vmin=-1, vmax=1)
plt.show()

var = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4',
'PAY_AMT5']
plt.figure(figsize = (8,8))
plt.title('Amount of previous payment (Apr-Sept) \ncorrelation plot (Pearson)')
corr = data[var].corr()
sea.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidth
s=.1,vmin=-1, vmax=1)
plt.show()

var = ['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']
plt.figure(figsize = (8,8))
plt.title('Repayment status (Apr-Sept) \ncorrelation plot (Pearson)')
corr = data[var].corr()
sea.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidth
s=.1,vmin=-1, vmax=1)
plt.show()

------------------
VISUALIZING DATA
------------------
def boxplot_variation(feature1, feature2, feature3, width=16):
 fig, ax1 = plt.subplots(ncols=1, figsize=(width,6))
 s = sea.boxplot(ax = ax1, x=feature1, y=feature2, hue=feature3,
 data=data, palette="PRGn",showfliers=False)
 s.set_xticklabels(s.get_xticklabels(),rotation=90)
 plt.show();

boxplot_variation('MARRIAGE','AGE', 'SEX',8)

boxplot_variation('EDUCATION','AGE', 'MARRIAGE',12)

boxplot_variation('AGE','LIMIT_BAL', 'SEX',16)

boxplot_variation('MARRIAGE','LIMIT_BAL', 'EDUCATION',12)

-----------------------------------------
SPLITTING DATA FOR TRAINING AND TESTING
-----------------------------------------
target = 'default.payment.next.month'
predictors = [ 'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE',
 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',
 'BILL_AMT1','BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4',
'BILL_AMT5', 'BILL_AMT6',
 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4',
'PAY_AMT5', 'PAY_AMT6']
train_df, val_df = train_test_split(data, test_size=0.25, random_state=42,
shuffle=True )

---------------------------------------
CREATING THE RANDOM FOREST CLASSIFIER
---------------------------------------
clf = RandomForestClassifier(n_jobs=-1,
 random_state=42,
 criterion='gini',
 n_estimators=350,
 verbose=False)
predictors = train_df.drop(columns=['default payment next
month']).columns.values
target = 'default payment next month'

clf.fit(train_df[predictors].values, train_df[target].values)

preds = clf.predict(val_df[predictors])

tmp = pd.DataFrame({'Feature': predictors, 'Feature importance':
clf.feature_importances_})
tmp = tmp.sort_values(by='Feature importance',ascending=False)
plt.figure(figsize = (7,4))
plt.title('Features importance',fontsize=14)
s = sea.barplot(x='Feature',y='Feature importance',data=tmp)
s.set_xticklabels(s.get_xticklabels(),rotation=90)
plt.show()

cm = pd.crosstab(val_df[target].values, preds, rownames=['Actual'],
colnames=['Predicted'])
fig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))
sea.heatmap(cm,
 xticklabels=['Not Default', 'Default'],
 yticklabels=['Not Default', 'Default'],
 annot=True,ax=ax1,
 linewidths=.2,linecolor="Darkblue", cmap="Blues")
plt.title('Confusion Matrix', fontsize=14)
plt.show()

-------------------------------------------------
CREATING THE RANDOM FOREST WITH ONE HOT ENCODER
-------------------------------------------------
cat_features = ['EDUCATION', 'SEX', 'MARRIAGE', 'PAY_0', 'PAY_2',
'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']
train_df_bkp = train_df.copy()
val_df_bkp = val_df.copy()
train_f_df = pd.get_dummies(train_df_bkp, columns = cat_features)
val_f_df = pd.get_dummies(val_df_bkp, columns = cat_features)
print("Default of Credit Card Clients train data - rows:",train_f_df.shape[0],"
columns:", train_f_df.shape[1])
print("Default of Credit Card Clients val data - rows:",val_f_df.shape[0],"
columns:", val_f_df.shape[1])

train_fa_df, val_fa_df = train_f_df.align(val_f_df, join='outer', axis=1,
fill_value=0)
print("Default of Credit Card Clients train data - rows:",train_fa_df.shape[0],"
columns:", train_fa_df.shape[1])
print("Default of Credit Card Clients val data - rows:",val_fa_df.shape[0],"
columns:", val_fa_df.shape[1])

train_fa_df.head(5)

target_f = 'default payment next month'
predictors_f = ['AGE', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3',
'BILL_AMT4',
 'BILL_AMT5', 'BILL_AMT6', 'EDUCATION_0', 'EDUCATION_1',
 'EDUCATION_2', 'EDUCATION_3', 'EDUCATION_4',
'EDUCATION_5',
 'EDUCATION_6', 'LIMIT_BAL', 'MARRIAGE_0', 'MARRIAGE_1',
 'MARRIAGE_2', 'MARRIAGE_3', 'PAY_0_-1', 'PAY_0_-2', 'PAY_0_0',
 'PAY_0_1', 'PAY_0_2', 'PAY_0_3', 'PAY_0_4', 'PAY_0_5', 'PAY_0_6',
 'PAY_0_7', 'PAY_0_8', 'PAY_2_-1', 'PAY_2_-2', 'PAY_2_0', 'PAY_2_1',
 'PAY_2_2', 'PAY_2_3', 'PAY_2_4', 'PAY_2_5', 'PAY_2_6', 'PAY_2_7',
 'PAY_2_8', 'PAY_3_-1', 'PAY_3_-2', 'PAY_3_0', 'PAY_3_1', 'PAY_3_2',
 'PAY_3_3', 'PAY_3_4', 'PAY_3_5', 'PAY_3_6', 'PAY_3_7', 'PAY_3_8',
 'PAY_4_-1', 'PAY_4_-2', 'PAY_4_0', 'PAY_4_1', 'PAY_4_2', 'PAY_4_3',
 'PAY_4_4', 'PAY_4_5', 'PAY_4_6', 'PAY_4_7', 'PAY_4_8', 'PAY_5_-1',
 'PAY_5_-2', 'PAY_5_0', 'PAY_5_2', 'PAY_5_3', 'PAY_5_4', 'PAY_5_5',
 'PAY_5_6', 'PAY_5_7', 'PAY_5_8', 'PAY_6_-1', 'PAY_6_-2', 'PAY_6_0',
 'PAY_6_2', 'PAY_6_3', 'PAY_6_4', 'PAY_6_5', 'PAY_6_6', 'PAY_6_7',
 'PAY_6_8', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4',
 'PAY_AMT5', 'PAY_AMT6', 'SEX_1', 'SEX_2']
 
 clf.fit(train_fa_df[predictors_f], train_df[target_f].values)
 
 preds = clf.predict(val_fa_df[predictors_f])
 
 tmp = pd.DataFrame({'Feature': predictors_f, 'Feature importance':
clf.feature_importances_})
tmp = tmp.sort_values(by='Feature importance',ascending=False)
plt.figure(figsize = (16,4))
plt.title('Features importance',fontsize=14)
s = sea.barplot(x='Feature',y='Feature importance',data=tmp)
s.set_xticklabels(s.get_xticklabels(),rotation=90)
plt.show()

cm = pd.crosstab(val_fa_df[target].values, preds, rownames=['Actual'],
colnames=['Predicted'])
fig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))
sea.heatmap(cm,
 xticklabels=['Not Default', 'Default'],
 yticklabels=['Not Default', 'Default'],
 annot=True,ax=ax1,
 linewidths=.2,linecolor="Darkblue", cmap="Blues")
plt.title('Confusion Matrix', fontsize=14)
plt.show()

----------------------
GENERATING THE OUTPUT
----------------------
roc_auc_score(val_df[target].values, preds)

_auc_score(val_fa_df[target].values, preds)
